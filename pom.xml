<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
	http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.pktech</groupId>
	<artifactId>microserver-vue-element</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>microserver-vue-element</name>
	<description>microserver-vue-element</description>

	<!-- 引用的依赖版本属性值 -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<javadoc.charset>UTF-8</javadoc.charset>
		<javadoc.encode>UTF-8</javadoc.encode>
		<java.version>1.8</java.version>
		<spring.boot.version>1.5.9.RELEASE</spring.boot.version>
		<spring.cloud.version>Dalston.SR5</spring.cloud.version>
		<!-- Plugins Version -->
		<apollo.version>0.10.0</apollo.version>
		<maven-compiler-plugin.version>3.6.0</maven-compiler-plugin.version>
		<maven-source-plugin.version>3.0.1</maven-source-plugin.version>
		<maven-javadoc-plugin.version>2.9.1</maven-javadoc-plugin.version>
		<maven-jar-plugin.version>3.0.2</maven-jar-plugin.version>
		<maven-install-plugin.version>2.5.2</maven-install-plugin.version>
		<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
		<spring-boot-maven-plugin.verion>1.5.9.RELEASE</spring-boot-maven-plugin.verion>
		<jersey.version>1.9.1</jersey.version>
		<fasterxml.jackson.version>2.8.8</fasterxml.jackson.version>
		<swagger2.version>2.2.2</swagger2.version>
		<jacoco.version>0.8.1</jacoco.version>
		<maven-surefire-plugin.version>2.19</maven-surefire-plugin.version>
		<drools.version>7.0.0.Final</drools.version>
	</properties>

	<!-- 私服仓库配置 start -->
	<!-- ①必选 -->
	<!-- ②中台私服快照及发布仓库地址 -->
	<!-- ③技术服务，属于T层 -->
	<!-- ④中台软件资产存放地 -->
	<repositories>
		<repository>
			<id>maven-groups</id>
			<url>http://10.128.190.7:8082/repository/maven-groups/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>nexus</id>
			<url>http://10.128.190.7:8082/repository/maven-groups/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>
	<!-- 私服仓库配置 end -->

	<!-- 中台开发微服务使用的Spring boot和cloud的版本依赖引入 -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.9.RELEASE</version>
		<relativePath />
	</parent>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring.cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- 中台环境类 start -->

		<!-- Apollo 客户端 start -->
		<!-- ①必选 -->
		<!-- ②注册到Apollo是中台模式的首要条件。无论是独立Java程序、传统Spring MVC和Java微服务。 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④应用软件参数的集中管理 -->
		<!-- 使用Apollo会默认引入：Google guava（Java常用工具类） -->
		<dependency>
			<groupId>com.ctrip.framework.apollo</groupId>
			<artifactId>apollo-client</artifactId>
			<version>${apollo.version}</version>
		</dependency>
		<dependency>
			<groupId>com.ctrip.framework.apollo</groupId>
			<artifactId>apollo-core</artifactId>
			<version>${apollo.version}</version>
		</dependency>
		<!-- Apollo 客户端 end -->

		<!-- 微服务注册Eureka Client start -->
		<!-- ①必选 -->
		<!-- ②通过Eureka Client才能把微服务注册到中台的Apollo的Eeruka Server中 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④微服务的集中管理 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka</artifactId>
		</dependency>
		<!-- 微服务注册Eureka Client end -->

		<!-- 应用监控SBA start -->
		<!-- ①必选 -->
		<!-- ②中台监控微服务状态必选的Maven依赖，若无，将无法进行微服务应用监控 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④获取微服务应用状态 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!-- 应用监控SBA end -->
		
		<!-- 应用熔断 start -->
		<!-- ①必选 -->
		<!-- ②中台监控微服务业务状态必选的Maven依赖，若无，将无法进行微服务业务状态监控 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④获取微服务业务状态和通过dashboard实时查看状态 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-hystrix-dashboard</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-hystrix</artifactId>
		</dependency>
		<!-- 应用熔断 end -->

		<!-- 调用链ZipKin start -->
		<!-- ①必选 -->
		<!-- ②中台形成微服务之间调用依赖关系，跟踪业务功能使用微服务情况所必须的Mavne依赖。若无，将无法定位特定业务下的微服务异常及故障。 -->
		<!-- ③未定义微服务业务标准时，是技术服务，属于T层；定义了微服务的业务标准，是业务服务，属于V层 -->
		<!-- ④获取微服务间的调用关系 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-sleuth-stream</artifactId>
		</dependency>
		<!-- 调用链ZipKin end -->

		<!-- 中台环境类 end -->

		<!-- 中台测试类 start -->
		<!-- 单元测试JUnit start -->
		<!-- ①必选 -->
		<!-- ②中台进行单元测试必须的Maven依赖，若无，中台无法自动进行单元测试，SonarQube上无法给出单元测试结果。 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④单元测试选择JUnit，不选择TensNG -->
		<!-- Maven的单元测试依赖插件 maven-surefire-plugin -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- 单元测试JUnit end -->

		<!-- 契约测试Swagger2 start -->
		<!-- ①必选 -->
		<!-- ②通过中台的mastercicd任务完成测试环境部署后，生成可通过浏览器API进行测试Restful接口。 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④契约测试。和Jersey配套使用 -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${swagger2.version}</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${swagger2.version}</version>
		</dependency>
		<!-- 契约测试Swagger2 end -->
		<!-- 中台测试类 end -->

		<!-- 中台中间件类 start -->
		<!-- 应用服务器Jetty start -->
		<!-- ①必选 -->
		<!-- ②用于MVC模式下，启动微服务 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④应用服务器，但是比Tomcat安全漏洞少，性能好，中台不选择Tomcat -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jetty</artifactId>
		</dependency>
		<!-- 应用服务器Jetty end -->

		<!-- Restful开发框架Jersey start -->
		<!-- ①可选 -->
		<!-- ②中台主推微服务模式，对外都是Restful方式的接口 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④用于Restful的开发，中台不选择过于复杂的HAL。这个和契约测试Swagger2是配套使用的。 -->
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-core</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-server</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-json</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		<!-- Restful开发框架Jersey end -->

		<!-- Elasticsearch start -->
		<!-- ①必选 -->
		<!-- ②中台使用的全文搜索引擎 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④基于RESTful web接口，是当前流行的企业级搜索引擎，能够达到实时搜索，稳定，可靠，快速，安装使用方便 -->
		<dependency>
			<groupId>org.elasticsearch</groupId>
			<artifactId>elasticsearch</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-elasticsearch</artifactId>
		</dependency>

		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna</artifactId>
		</dependency>
		<!-- Elasticsearch end -->

		<!-- 缓存组件Redis start -->
		<!-- ①必选 -->
		<!-- ②中台作为mybatis二级缓存的组件 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④redis是一个key-value存储系统 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<!-- 缓存组件Redis end -->

		<!-- 规则引擎drools start -->
		<!-- ①必选 -->
		<!-- ②中台作为规则引擎使用drools -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④一个易于访问企业策略、易于调整以及易于管理的开源业务规则引擎 -->
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-core</artifactId>
			<version>${drools.version}</version>
		</dependency>
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-compiler</artifactId>
			<version>${drools.version}</version>
		</dependency>
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-decisiontables</artifactId>
			<version>${drools.version}</version>
		</dependency>
		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-templates</artifactId>
			<version>${drools.version}</version>
		</dependency>
		<dependency>
			<groupId>org.kie</groupId>
			<artifactId>kie-api</artifactId>
			<version>${drools.version}</version>
		</dependency>
		<!-- 规则引擎drools end -->

		<!-- 中台中间件类 end -->

		<!-- 数据库访问类 start -->
		<!-- 数据访问类mybatis start -->
		<!-- ①可选 -->
		<!-- ②用于访问DAO层 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④为了大家操作数据库的使用习惯，统一用Mybatis，中台不选择JPA -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-ehcache</artifactId>
			<version>1.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.0</version>
		</dependency>

		<dependency>
			<groupId>com.github.pagehelper</groupId>
			<artifactId>pagehelper-spring-boot-starter</artifactId>
			<version>1.1.1</version>
		</dependency>
		<!-- 数据访问类mybatis end -->

		<!-- Mysql或MariaDB数据库驱动类 start -->
		<!-- ①可选 -->
		<!-- ②用于访问Mysql或MariaDB数据库 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④不用的时候注释掉，和Oracle驱动二选一 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		<!-- Mysql或MariaDB数据库驱动类 end -->

		<!-- Oracle数据库驱动类 start -->
		<!-- ①可选 -->
		<!-- ②用于访问Oracle数据库 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④不用的时候注释掉，和Mysql驱动二选一 -->
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc6</artifactId>
			<version>11.2.0.3</version>
		</dependency>
		<!-- Oracle数据库驱动类 end -->

		<!-- 数据库访问类 end -->

		<!-- 中台组件 start -->
		<!-- ①必选 -->
		<!-- ②中台微服务开发需要的组件依赖 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④中台Swagger2契约测试的一些配置属性，向Kafka发送业务日志的一些功能类，处理客户端跨域安全访问的，设置业务日志级别 -->
		<dependency>
			<groupId>com.pktech.osmc</groupId>
			<artifactId>osmc-core</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
		<!-- 中台组件 end -->

		<!-- 其他工具类 start -->
		<!-- jackson start -->
		<!-- ①必选 -->
		<!-- ②Java Json解析器 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④基于Java平台的一套数据处理工具，被称为最好的Java Json解析器。 -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>${fasterxml.jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${fasterxml.jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${fasterxml.jackson.version}</version>
		</dependency>
		<!-- jackson end -->

		<!-- Guava start -->
		<!-- ①必选 -->
		<!-- ②Java项目广泛依赖 的核心库,类似Apache Commons工具集 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④集合 [collections] 、缓存 [caching] 、原生类型支持 [primitives support] 、并发库 [concurrency libraries] 、通用注解 [common annotations] 、字符串处理 [string processing] 、I/O -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>21.0</version>
		</dependency>
		<!-- Guava end -->
		<!-- 其他工具类 end -->

	</dependencies>

	<build>
		<!-- 构建可运行jar包的名称 -->
		<finalName>microserver-vue-element</finalName>
		<!-- 中台微服务依赖插件 -->
		<!-- ①比选 -->
		<!-- ②中台Maven构建所需的comiler插件 -->
		<!-- 生产源代码的source插件 -->
		<!-- 生成JavaDoc的javadoc插件 -->
		<!-- 生产可执行war或jar包的jar插件 -->
		<!-- jar归档打包和放入本地Maven库的install插件 -->
		<!-- 将归档产物上传到私服Nexus的deloy插件 -->
		<!-- 用于单元测试的surefire插件 -->
		<!-- jacoco覆盖率的插件 -->
		<!-- ③技术服务，属于T层 -->
		<!-- ④中台自动化构建的基础 -->
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>${maven-source-plugin.version}</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${maven-javadoc-plugin.version}</version>
				<configuration>
					<charset>${javadoc.charset}</charset>
					<docencoding>${javadoc.encode}</docencoding>
					<tags>
						<tag>
							<name>email</name>
							<placement>a</placement>
							<head>略过email规则</head>
						</tag>
						<tag>
							<name>date</name>
							<placement>a</placement>
							<head>略过date规则</head>
						</tag>
					</tags>
				</configuration>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<classesDirectory>target/classes</classesDirectory>
					<archive>
						<manifest>
							<useUniqueVersions>false</useUniqueVersions>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
							<mainClass>com.pktech.App</mainClass>
						</manifest>
						<manifestEntries>
							<Class-Paht>.</Class-Paht>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
				<version>${maven-install-plugin.version}</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>${maven-deploy-plugin.version}</version>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot-maven-plugin.verion}</version>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<type>jar</type>
							<includeTypes>jar</includeTypes>
							<useUninqeVersions>false</useUninqeVersions>
							<outputDirectory>
								${project.build.directory}/lib
							</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
				<configuration>
					<argLine>
						${argLine} -Dapp.id=microserver-vue-element -Denv=${env} -Ddev_meta=${dev_meta} -Dapollo.cluster=default
					</argLine>
					<skip>false</skip>
				</configuration>
			</plugin>

			<!-- 覆盖率测试插件 start -->
			<!-- ①必选 -->
			<!-- ②中台生成代码质量评估和覆盖率报告必须的Maven依赖，若无，SonarQube上无法给出相应的报告 -->
			<!-- ③技术服务，属于T层 -->
			<!-- ④软件代码覆盖率评估 -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<executions>
					<execution>
						<id>prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>target/jacoco.exec</dataFile>
							<outputDirectory>target/jacoco-ut</outputDirectory>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<systemPropertyVariables>
						<jacoco-agent.destfile>target/jacoco.exec</jacoco-agent.destfile>
					</systemPropertyVariables>
				</configuration>
			</plugin>
			<!-- 覆盖率测试插件 end -->

		</plugins>
	</build>

	<!-- 应用镜像push和微服务可执行jar upload的地址配置 start -->
	<!-- ①必选 -->
	<!-- ②中台私服快照及发布仓库地址 -->
	<!-- ③技术服务，属于T层 -->
	<!-- ④中台软件资产存放地 -->
	<distributionManagement>
		<repository>
			<id>releases</id>
			<name>releases</name>
			<url>${maven_hosted_release_repo_url}</url>
		</repository>
		<snapshotRepository>
			<id>snapshot</id>
			<name>snapshot</name>
			<url>${maven_hosted_snapshot_repo_url}</url>
		</snapshotRepository>
	</distributionManagement>
	<!-- 应用镜像push和微服务可执行jar upload的地址配置 end -->

</project>
